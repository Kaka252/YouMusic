apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.zhouyou.music"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.appVersionCode
        versionName rootProject.ext.appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        renderscriptTargetApi 24
        renderscriptSupportModeEnabled true

        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'mips', 'mips64'
        }

        multiDexEnabled true
    }

    productFlavors {
        devOnLineIncremental {
            minSdkVersion 21
            dexOptions {
                incremental true //增量编译
                javaMaxHeapSize "3g"
                preDexLibraries true //将lab预编译为dex
                dexInProcess = true
                jumboMode = true
            }
            buildConfigField("boolean", "PRINT_LOG", "true")
            buildConfigField("boolean", "API_ONLINE", "true")
            buildConfigField("boolean", "QA", "false")
            buildConfigField("String", "APP_VERSION_NAME", "\"${rootProject.ext.appVersionName}\"")
        }

        devOnLine {
            minSdkVersion rootProject.ext.minSdkVersion
            dexOptions {
                incremental true //增量编译
                javaMaxHeapSize "3g"
                preDexLibraries true //将lab预编译为dex
                dexInProcess = true
                jumboMode = true
            }
            buildConfigField("boolean", "PRINT_LOG", "true")
            buildConfigField("boolean", "API_ONLINE", "true")
            buildConfigField("boolean", "QA", "false")
            buildConfigField("String", "APP_VERSION_NAME", "\"${rootProject.ext.appVersionName}\"")
        }
    }

    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            storeFile file("youmusic.jks")
            keyAlias "youmusic"
            keyPassword "1qaz2wsxE"
            storePassword "1qaz2wsxE"
        }
    }

    buildTypes {
        debug {
            rootProject.ext.tinkerEnabled = false   // tinker不启用
            minifyEnabled false     // 混淆关闭
            shrinkResources false    // 将无用的类资源过滤，Gradle2.2版本后设置为false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        release {
            rootProject.ext.tinkerEnabled = true   // tinker启用
            minifyEnabled true      // 混淆打开
            shrinkResources true    // 将无用的类资源过滤，Gradle2.2版本后设置为false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    testCompile 'junit:junit:4.12'
    compile project(path: ':library')
    compile project(path: ':network')
    compile project(path: ':remote')
    compile files('libs/ormlite-android-5.0.jar')
    compile files('libs/ormlite-core-5.0.jar')
    compile 'com.wonderkiln:blurkit:1.0.0'
    compile 'com.squareup.okhttp3:okhttp:3.6.0'
    compile 'com.facebook.stetho:stetho:1.1.0'
    compile 'com.android.support:multidex:1.0.1'
    compile("com.tencent.tinker:tinker-android-anno:$rootProject.ext.tinker") { changing = true }   // 可选，用于生成application类
    //tinker's main Android lib
    compile('com.tencent.tinker:tinker-android-lib:1.7.7')

}

// tinker配置
def bakPath = file("${buildDir}/bakApk/")

ext {
    tinkerOldApkPath = "${bakPath}/app-debug-1018-17-32-47.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"
    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
    appTinkerId = "com.zhouyou.music.tinker.hotfix_${rootProject.ext.appVersionCode}"
    print appTinkerId
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : ext.appTinkerId
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : rootProject.ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    apply plugin: 'com.tencent.tinker.patch'
    tinkerPatch {
        // 基准apk包路径，也就是旧包路径
        oldApk = getOldApkPath()

        ignoreWarning = false
        useSign = true
        buildConfig {
            applyMapping = getApplyMappingPath()
            applyResourceMapping = getApplyResourceMappingPath()
            tinkerId = getTinkerIdValue()
        }
        dex {
            dexMode = "jar"
//            usePreGeneratedPatchDex = false
            pattern = ["classes*.dex", "assets/secondary-dex-?.jar"]
            loader = ["com.tencent.tinker.loader.*",
                      //warning, you must change it with your application
                      "com.zhouyou.music.SampleApplication",
            ]
        }
        lib {
            pattern = ["lib/armeabi/*.so"]
        }
        res {
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
            ignoreChange = ["assets/sample_meta.txt"]
            largeModSize = 100
        }
        packageConfig {
            configField("patchMessage", "tinker is sample to use")
        }
        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }

        List<String> flavors = new ArrayList<>();
        project.android.productFlavors.each { flavor ->
            flavors.add(flavor.name)
        }
        boolean hasFlavors = flavors.size() > 0
        /**
         * bak apk and mapping
         *  创建Task并执行文件操作
         */
        android.applicationVariants.all { variant ->
            /**
             * task type, you want to bak
             */
            def taskName = variant.name
            def date = new Date().format("MMdd-HH-mm-ss")
            tasks.all {
                if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                    it.doLast {
                        copy {
                            def fileNamePrefix = "${project.name}-${variant.baseName}"
                            def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"
                            def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                            from variant.outputs.outputFile
                            into destPath
                            rename { String fileName ->
                                fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                            }
                            from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                            into destPath
                            rename { String fileName ->
                                fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                            }
                            from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                            into destPath
                            rename { String fileName ->
                                fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                            }
                        }
                    }
                }
            }
        }
        project.afterEvaluate {
            if (hasFlavors) {
                task(tinkerPatchAllFlavorRelease) {
                    group = 'tinker'
                    def originOldPath = getTinkerBuildFlavorDirectory()
                    for (String flavor : flavors) {
                        def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                        dependsOn tinkerTask
                        def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                        preAssembleTask.doFirst {
                            String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                            project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                            project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                            project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                        }

                    }
                }

                task(tinkerPatchAllFlavorDebug) {
                    group = 'tinker'
                    def originOldPath = getTinkerBuildFlavorDirectory()
                    for (String flavor : flavors) {
                        def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                        dependsOn tinkerTask
                        def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                        preAssembleTask.doFirst {
                            String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                            project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                            project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                            project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                        }

                    }
                }
            }
        }
    }
}


